import re
from typing import Literal

CIRCLED_DIGITS = {
    0: "‚ìø",
    1: "‚ù∂",
    2: "‚ù∑",
    3: "‚ù∏",
    4: "‚ùπ",
    5: "‚ù∫",
    6: "‚ùª",
    7: "‚ùº",
    8: "‚ùΩ",
    9: "‚ùæ",
    10: "‚ùø",
    11: "‚ì´",
    12: "‚ì¨",
    13: "‚ì≠",
    14: "‚ìÆ",
    15: "‚ìØ",
    16: "‚ì∞",
    17: "‚ì±",
    18: "‚ì≤",
    19: "‚ì≥",
    20: "‚ì¥",
    21: "„âë",
    22: "„âí",
    23: "„âì",
    24: "„âî",
    25: "„âï",
    26: "„âñ",
    27: "„âó",
    28: "„âò",
    29: "„âô",
    30: "„âö",
    31: "„âõ",
    32: "„âú",
    33: "„âù",
    34: "„âû",
    35: "„âü",
    36: "„ä±",
    37: "„ä≤",
    38: "„ä≥",
    39: "„ä¥",
    40: "„äµ",
    41: "„ä∂",
    42: "„ä∑",
    43: "„ä∏",
    44: "„äπ",
    45: "„ä∫",
    46: "„äª",
    47: "„äº",
    48: "„äΩ",
    49: "„äæ",
    50: "„äø",
}

MULTIBOX_DIGITS = {
    0: "Û∞ºé",
    1: "Û∞ºè",
    2: "Û∞ºê",
    3: "Û∞ºë",
    4: "Û∞ºí",
    5: "Û∞ºì",
    6: "Û∞ºî",
    7: "Û∞ºï",
    8: "Û∞ºñ",
    9: "Û∞ºó",
    10: "Û∞ø™",
}

SUBSCRIPT_DIGITS = {
    0: "‚ÇÄ",
    1: "‚ÇÅ",
    2: "‚ÇÇ",
    3: "‚ÇÉ",
    4: "‚ÇÑ",
    5: "‚ÇÖ",
    6: "‚ÇÜ",
    7: "‚Çá",
    8: "‚Çà",
    9: "‚Çâ",
}

SUPERSCRIPT_DIGITS = {
    0: "‚Å∞",
    1: "¬π",
    2: "¬≤",
    3: "¬≥",
    4: "‚Å¥",
    5: "‚Åµ",
    6: "‚Å∂",
    7: "‚Å∑",
    8: "‚Å∏",
    9: "‚Åπ",
}

# Additional cool citation styles
SQUARED_DIGITS = {
    1: "‚ñ™",
    2: "‚óæ",
    3: "‚óº",
    4: "‚¨õ",
    5: "üü´",
    6: "üü™",
    7: "üü¶",
    8: "üü©",
    9: "üüß",
    10: "üü•",
}

DIAMOND_DIGITS = {
    1: "‚óá",
    2: "‚óà",
    3: "‚óÜ",
    4: "‚óä",
    5: "‚¨¶",
    6: "‚¨•",
    7: "‚¨ß",
    8: "‚¨®",
    9: "‚¨©",
    10: "‚ô¶",
}

STAR_DIGITS = {
    1: "‚òÖ",
    2: "‚ú¨",
    3: "‚ú≠",
    4: "‚úÆ",
    5: "‚úØ",
    6: "‚ú∞",
    7: "‚≠ê",
    8: "üåü",
    9: "‚ú®",
    10: "üí´",
}

ARROW_DIGITS = {
    1: "‚ñ∂",
    2: "‚ñ∑",
    3: "‚ñ∏",
    4: "‚ñπ",
    5: "‚ñ∫",
    6: "‚û§",
    7: "‚ûú",
    8: "‚û°",
    9: "‚ü∂",
    10: "‚á®",
}

ROMAN_NUMERALS = {
    1: "‚Ö∞",
    2: "‚Ö±",
    3: "‚Ö≤",
    4: "‚Ö≥",
    5: "‚Ö¥",
    6: "‚Öµ",
    7: "‚Ö∂",
    8: "‚Ö∑",
    9: "‚Ö∏",
    10: "‚Öπ",
    11: "‚Ö∫",
    12: "‚Öª",
}

PARENTHESIZED_LETTERS = {
    1: "‚íú",
    2: "‚íù",
    3: "‚íû",
    4: "‚íü",
    5: "‚í†",
    6: "‚í°",
    7: "‚í¢",
    8: "‚í£",
    9: "‚í§",
    10: "‚í•",
    11: "‚í¶",
    12: "‚íß",
    13: "‚í®",
    14: "‚í©",
    15: "‚í™",
    16: "‚í´",
    17: "‚í¨",
    18: "‚í≠",
    19: "‚íÆ",
    20: "‚íØ",
    21: "‚í∞",
    22: "‚í±",
    23: "‚í≤",
    24: "‚í≥",
    25: "‚í¥",
    26: "‚íµ",
}

DOUBLE_CIRCLED_DIGITS = {
    1: "‚ìµ",
    2: "‚ì∂",
    3: "‚ì∑",
    4: "‚ì∏",
    5: "‚ìπ",
    6: "‚ì∫",
    7: "‚ìª",
    8: "‚ìº",
    9: "‚ìΩ",
    10: "‚ìæ",
}

NEGATIVE_CIRCLED_DIGITS = {
    1: "‚ù∂",
    2: "‚ù∑",
    3: "‚ù∏",
    4: "‚ùπ",
    5: "‚ù∫",
    6: "‚ùª",
    7: "‚ùº",
    8: "‚ùΩ",
    9: "‚ùæ",
    10: "‚ùø",
    11: "‚ìø",
    12: "‚ì´",
    13: "‚ì¨",
    14: "‚ì≠",
    15: "‚ìÆ",
    16: "‚ìØ",
    17: "‚ì∞",
    18: "‚ì±",
    19: "‚ì≤",
    20: "‚ì≥",
}


def symbol_of(
    n: int,
    style: Literal[
        "auto",
        "circled",
        "multibox",
        "subscript",
        "superscript",
        "short",
        "long",
        "squared",
        "diamond",
        "star",
        "arrow",
        "pdf",
        "roman",
        "letters",
        "double_circled",
        "negative_circled",
        "brackets",
        "braces",
        "angles",
    ] = "long",
    max_source: int | None = None,
) -> str:
    assert isinstance(n, int) and n >= 0
    assert style in [
        "auto",
        "circled",
        "multibox",
        "subscript",
        "superscript",
        "short",
        "long",
        "squared",
        "diamond",
        "star",
        "arrow",
        "pdf",
        "roman",
        "letters",
        "double_circled",
        "negative_circled",
        "brackets",
        "braces",
        "angles",
    ]

    if style == "auto":
        max_multibox = max(MULTIBOX_DIGITS.keys())
        max_circled = max(CIRCLED_DIGITS.keys())
        if max_source:
            if n < max_circled and max_source <= max_multibox:
                style = "multibox"
            elif n < max_circled and max_source < max_circled:
                style = "circled"

        if style == "auto":
            style = "superscript"

    if style == "circled":
        return CIRCLED_DIGITS.get(n, f"[[{str(n)}]]")
    elif style == "multibox":
        return MULTIBOX_DIGITS.get(n, f"[[{str(n)}]]")
    elif style == "subscript":
        return "".join(SUBSCRIPT_DIGITS[int(digit)] for digit in str(n))
    elif style == "superscript":
        return "".join(SUPERSCRIPT_DIGITS[int(digit)] for digit in str(n))
    elif style == "short":
        return f"‚ü¶{n}‚üß"
    elif style == "long":
        return f"‚ü¶‚ü¶{n}‚üß‚üß"
    elif style == "squared":
        return SQUARED_DIGITS.get(n, f"‚ñ†{n}")
    elif style == "diamond":
        return DIAMOND_DIGITS.get(n, f"‚óÜ{n}")
    elif style == "star":
        return STAR_DIGITS.get(n, f"‚òÖ{n}")
    elif style == "arrow":
        return ARROW_DIGITS.get(n, f"‚Üí{n}")
    elif style == "pdf":
        return f"Û∞∞òÛ∞Ø¥Û∞Ø∫Óò°{n}"
    elif style == "roman":
        # Convert to uppercase for larger numbers
        if n <= len(ROMAN_NUMERALS):
            return ROMAN_NUMERALS[n]
        else:
            # Convert to traditional roman numerals for larger numbers
            def to_roman(num):
                val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
                syms = [
                    "M",
                    "CM",
                    "D",
                    "CD",
                    "C",
                    "XC",
                    "L",
                    "XL",
                    "X",
                    "IX",
                    "V",
                    "IV",
                    "I",
                ]
                roman_num = ""
                i = 0
                while num > 0:
                    for _ in range(num // val[i]):
                        roman_num += syms[i]
                        num -= val[i]
                    i += 1
                return roman_num.lower()

            return f"({to_roman(n)})"
    elif style == "letters":
        return PARENTHESIZED_LETTERS.get(n, f"({chr(96 + n)})" if n <= 26 else f"({n})")
    elif style == "double_circled":
        return DOUBLE_CIRCLED_DIGITS.get(n, f"‚¶ø{n}")
    elif style == "negative_circled":
        return NEGATIVE_CIRCLED_DIGITS.get(n, f"‚óè{n}")
    elif style == "brackets":
        return f"[{n}]"
    elif style == "braces":
        return f"{{{n}}}"
    elif style == "angles":
        return f"‚ü®{n}‚ü©"
    else:
        return f"[[{str(n)}]]"


def style_citations(
    text: str,
    style: Literal[
        "auto",
        "circled",
        "multibox",
        "subscript",
        "superscript",
        "long",
        "page",
        "parenthesis",
        "squared",
        "diamond",
        "star",
        "arrow",
        "pdf",
        "roman",
        "letters",
        "double_circled",
        "negative_circled",
        "brackets",
        "braces",
        "angles",
        "short",
    ] = "superscript",
) -> str:
    """Replace citation markers in the format [citation:<page-id>] with pretty formatted versions.

    Args:
        text: The text containing citation markers
        style: The style to use for the citation numbers
            - "auto": Automatically choose the best style based on the number of citations
            - "circled": ‚ù∂ ‚ù∑ ‚ù∏ (up to 50)
            - "multibox": Û∞ºè Û∞ºê Û∞ºë (special multibox icons)
            - "subscript": ‚ÇÅ ‚ÇÇ ‚ÇÉ
            - "superscript": ¬π ¬≤ ¬≥ (default)
            - "short": ‚ü¶1‚üß ‚ü¶2‚üß ‚ü¶3‚üß
            - "long": ‚ü¶‚ü¶1‚üß‚üß ‚ü¶‚ü¶2‚üß‚üß ‚ü¶‚ü¶3‚üß‚üß
            - "squared": ‚ñ™ ‚óæ ‚óº (color squares for first 10)
            - "diamond": ‚óá ‚óà ‚óÜ (various diamond shapes)
            - "star": ‚òÖ ‚ú¨ ‚ú≠ (various star shapes)
            - "arrow": ‚ñ∂ ‚ñ∑ ‚ñ∏ (various arrow shapes)
            - "pdf": Û∞∞òÛ∞Ø¥Û∞Ø∫1 Û∞∞òÛ∞Ø¥Û∞Ø∫2 Û∞∞òÛ∞Ø¥Û∞Ø∫3 (PDF-style icons)
            - "roman": ‚Ö∞ ‚Ö± ‚Ö≤ (lowercase roman numerals)
            - "letters": ‚íú ‚íù ‚íû (parenthesized letters)
            - "double_circled": ‚ìµ ‚ì∂ ‚ì∑ (double circles)
            - "negative_circled": ‚ù∂ ‚ù∑ ‚ù∏ (filled circles)
            - "brackets": [1] [2] [3]
            - "braces": {1} {2} {3}
            - "angles": ‚ü®1‚ü© ‚ü®2‚ü© ‚ü®3‚ü©
            - "page": Format as (P<page-id>) or (P<page-id1>,P<page-id2>)
            - "parenthesis": Format as (<page-id>)

    Returns:
        The text with citation markers replaced with pretty formatted versions
    """
    import re

    # Find all unique citation markers and count them
    citation_pattern = r"\[\[citation:([^\]]+)\]\]"
    citations = re.findall(citation_pattern, text)

    if style == "page" or style == "parenthesis":
        # Group citations that are next to each other
        deduplicated_text = text
        citation_groups = []

        # First, replace each citation with a unique marker
        for i, citation in enumerate(citations):
            marker = f"__CITATION_MARKER_{i}__"
            deduplicated_text = deduplicated_text.replace(f"[citation:{citation}]", marker, 1)
            citation_groups.append([citation])

        # Process the markers sequentially to group adjacent ones
        final_text = ""
        remaining_text = deduplicated_text
        while remaining_text:
            marker_match = re.search(r"__CITATION_MARKER_(\d+)__", remaining_text)
            if not marker_match:
                final_text += remaining_text
                break

            # Add the text up to the marker
            final_text += remaining_text[: marker_match.start()]
            remaining_text = remaining_text[marker_match.end() :]

            # Get the current marker index
            current_idx = int(marker_match.group(1))

            # Format based on style
            if style == "page":
                page_ids = [f"P{page_id}" for page_id in citation_groups[current_idx]]
                if len(page_ids) == 1:
                    replacement = f"({page_ids[0]})"
                else:
                    replacement = f"({','.join(page_ids)})"
            else:  # parenthesis style
                if len(citation_groups[current_idx]) == 1:
                    replacement = f"({citation_groups[current_idx][0]})"
                else:
                    replacement = f"({','.join(citation_groups[current_idx])})"

            final_text += replacement

        return final_text
    else:
        # Create a mapping from citation page_id to index
        citation_map = {page_id: idx for idx, page_id in enumerate(dict.fromkeys(citations))}

        # Calculate the maximum citation index for auto styling
        max_citation = len(citation_map) - 1 if citation_map else 0

        # Replace each citation marker with its styled version
        styled_text = text
        for page_id, idx in citation_map.items():
            symbol = symbol_of(idx + 1, style=style, max_source=max_citation + 1)
            styled_text = styled_text.replace(f"[citation:{page_id}]", symbol)

        return styled_text


LONG_PATTERN = re.compile(r"‚ü¶‚ü¶(\d+)‚üß‚üß")


def long2circled(text: str) -> str:
    """
    Convert ‚Äúlong-style‚Äù citation markers (‚ü¶‚ü¶n‚üß‚üß) to their circled-digit
    equivalents (‚ù∂ ‚ù∑ ‚ù∏ ‚Ä¶).

    Args:
        text: The full text that may contain ‚ü¶‚ü¶n‚üß‚üß markers.

    Returns:
        A copy of *text* where every ‚ü¶‚ü¶n‚üß‚üß has been replaced with
        the corresponding character from ``CIRCLED_DIGITS``.
        If *n* is not present in the lookup table, the original marker
        is left unchanged.
    """

    def _replace(match: re.Match[str]) -> str:
        n = int(match.group(1))
        return "[" + CIRCLED_DIGITS.get(n, match.group(0)) + "]() "

    return LONG_PATTERN.sub(_replace, text)
