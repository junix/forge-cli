# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

from typing import Optional, TYPE_CHECKING

from typing_extensions import Literal

if TYPE_CHECKING:
    from message._types.tool_call import ToolCall

from ._models import BaseModel

__all__ = ["ResponseFunctionToolCall"]


class ResponseFunctionToolCall(BaseModel):
    arguments: str
    """A JSON string of the arguments to pass to the function."""

    call_id: str
    """The unique ID of the function tool call generated by the model."""

    name: str
    """The name of the function to run."""

    type: Literal["function_call"]
    """The type of the function tool call. Always `function_call`."""

    id: Optional[str] = None
    """The unique ID of the function tool call."""

    status: Optional[Literal["in_progress", "completed", "incomplete"]] = None
    """The status of the item.

    One of `in_progress`, `completed`, or `incomplete`. Populated when items are
    returned via API.
    """

    @classmethod
    def from_chat_tool_call(
        cls,
        chat_tool_call: "ToolCall",
        status: Literal["in_progress", "completed", "incomplete"] = "in_progress",
    ) -> "ResponseFunctionToolCall":
        """Convert a ToolCall to a ResponseFunctionToolCall.

        Args:
            chat_tool_call (ToolCall): A tool call object from our internal message types.

        Returns:
            ResponseFunctionToolCall: A function tool call object compatible with the response style API.
        """
        return cls(
            arguments=chat_tool_call.function.arguments,
            call_id=chat_tool_call.id,
            name=chat_tool_call.function.name,
            type="function_call",
            id=chat_tool_call.id,
            status=status,
        )

    def to_chat_tool_call(self) -> "ToolCall":
        """Convert to internal ToolCall type.

        Returns:
            ToolCall: Internal ToolCall object for use throughout Knowledge Forge.
        """
        # Import ToolCall here to avoid circular imports
        from message._types.tool_call import ToolCall, FunctionCall
        
        return ToolCall(
            id=self.call_id,
            type="function",
            function=FunctionCall(
                name=self.name, 
                arguments=self.arguments
            ),
        )
    
