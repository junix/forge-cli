---
description: How to create a cursor rule file
---
## 项目规则（修订版）

项目规则位于 `.cursor/rules` 目录中。每条规则保存为 **`.mmdc`** 文件并受版本控制，可按需调用或基于文件匹配自动生效。  
通过合理拆分与组合，你可以用规则来：

- **固化领域知识**：把团队约定或架构决策写进规则，避免「口头传统」  
- **自动化流程**：为重复性任务（如生成模板、插入样板代码）提供一键化入口  
- **统一风格**：约束编码规范、命名方式或目录结构  

---

## 规则类型一览

| 规则类型 | 触发方式 | 典型场景 |
| -------- | -------- | -------- |
| **Always** | 始终加载 | 全局编码规范、项目通用常量 |
| **Auto Attached** | 当前请求引用的路径匹配 `globs` 时自动加载 | 针对特定目录/文件的约定 |
| **Agent Requested** | AI 根据 `description` 判断是否需要 | 可选性能优化、代码生成模板 |
| **Manual** | 在聊天中显式写 `@ruleName` 触发 | 临时性或对话上下文专用规则 |

---

## `.mmdc` 文件结构

一个 `.mmdc` 文件由 **元数据块** 和 **内容块** 两部分组成，二者均使用 Markdown 语法编写。

````markdown
---
# 元数据块：三个连字符包围，字段类似 YAML
description: RPC 服务样板                # 字符串，简明描述规则用途
globs: src/**/*.service.ts,tests/*.ts    # 仅 Auto Attached 需要，逗号分隔 glob
alwaysApply: false                       # 布尔值，true = Always 规则
---

# 内容块：标准 Markdown，可写指南、示例、清单
- 定义服务时使用内部 RPC 模式  
- 服务名称必须使用 `snake_case`

[server-template.ts](mdc:path/to/service-template.ts)                       <!-- 引用文件示例 -->
````
> **要点速览**  
> 1. 元数据块用 `---` 包裹；至少写 `alwaysApply`，根据类型再补 `description`、`globs`。  
> 2. 内容块紧跟其后，用普通 Markdown 描述具体规则。  
> 3. 如需把项目中其他文件完整内容注入上下文，在内容中插入 `[caption](mdc:path/to/file)`。  
> 4. **不要**在 `.mmdc` 内写 UI 操作指令或无关提示。

### 元数据字段详解

| 字段 | 类型 | 是否必填 | 说明 |
| ---- | ---- | -------- | ---- |
| `description` | `string` | Agent Requested **必填** | 供 AI 判断是否引用；保持**一句话**即可 |
| `globs` | `string` | Auto Attached **必填** | 多个 glob 用逗号分隔，无空格<br>`*`：匹配任意字符（不含 `/`）<br>`**`：递归匹配任意层级<br>`?`：匹配单字符 |
| `alwaysApply` | `boolean` | **必填** | `true` → Always；否则按类型触发 |

---

## 内容块语法

- **普通 Markdown**：标题、列表、代码块均可使用。  
- **文件引用**：`[filename.py](mdc:path/to/filename.py)`  
  - 路径相对于仓库根目录。  
  - 触发时该文件内容会被完整附加到 AI 上下文。  
  - 建议在引用前写一句用途说明，方便人类阅读。  

示例：

```markdown
### 样板代码
以下模板提供最小可运行服务：

[min_service.py](mdc:templates/min_service.py)
```

---

## 使用规则的最佳实践

1. **拆分 & 组合**  
   - 单一 `.mmdc` 聚焦单一主题（<500 行），避免「万能大文件」。  
   - 大型策略可拆成多个互相引用的规则。  

2. **针对性强**  
   - 编写可操作条目，例如「所有仓库名称必须 kebab-case」。  
   - 避免含糊表述，如「尽量写优雅代码」。  

3. **示例驱动**  
   - 为复杂语法或模板附带最小工作示例。  
   - 引用现有文件而非重复粘贴代码，保持单一真相来源。  

4. **复用**  
   - 当你在对话中多次要求同一模式，抽成规则；下次直接 `@ruleName`。  

---

## 手动激活示例

若存在 `python-docstring.mmdc`：

```markdown
请在接下来生成的代码中使用 Google 风格 docstring。  
```

该规则及其引用文件立即生效，而不会在其他请求中默认加载。

---
